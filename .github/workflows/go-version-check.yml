name: Check Go Version

on:
  schedule:
    # Check every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  check-go-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Get current Go version from go.mod
        id: current-version
        run: |
          CURRENT_VERSION=$(grep '^go ' go.mod | cut -d' ' -f2)
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Get latest Go version
        id: latest-version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/golang/go/releases/latest | jq -r '.tag_name' | sed 's/go//')
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
      
      - name: Compare versions
        id: compare
        run: |
          CURRENT="${{ steps.current-version.outputs.current }}"
          LATEST="${{ steps.latest-version.outputs.latest }}"
          
          if [ "$CURRENT" != "$LATEST" ]; then
            echo "update-needed=true" >> $GITHUB_OUTPUT
            echo "Go update available: $CURRENT -> $LATEST"
          else
            echo "update-needed=false" >> $GITHUB_OUTPUT
            echo "Go is up to date: $CURRENT"
          fi
      
      - name: Create issue for Go update
        if: steps.compare.outputs.update-needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const current = '${{ steps.current-version.outputs.current }}';
            const latest = '${{ steps.latest-version.outputs.latest }}';
            
            const title = `Update Go from ${current} to ${latest}`;
            const body = `A new Go version is available!
            
            **Current version:** ${current}
            **Latest version:** ${latest}
            
            ## To update:
            1. Update \`go.mod\`: Change \`go ${current}\` to \`go ${latest}\`
            2. Update \`Dockerfile\`: Change \`FROM golang:${current}\` to \`FROM golang:${latest}\`
            3. Test the application
            4. Update any CI/CD configurations if needed
            
            [Go ${latest} Release Notes](https://golang.org/doc/devel/release#go${latest.replace(/\./g, '')})`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['golang-update'],
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['golang-update', 'enhancement'],
                assignees: ['andkrause']
              });
            } 