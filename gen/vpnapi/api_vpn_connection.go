// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * VPN Gateway API
 *
 * A REST compliant API to manage a VPN Gateway instance.
 *
 * API version: 1.0
 */

package vpnapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VpnConnectionAPIController binds http requests to an api service and writes the service results to the http response
type VpnConnectionAPIController struct {
	service      VpnConnectionAPIServicer
	errorHandler ErrorHandler
}

// VpnConnectionAPIOption for how the controller is set up.
type VpnConnectionAPIOption func(*VpnConnectionAPIController)

// WithVpnConnectionAPIErrorHandler inject ErrorHandler into controller
func WithVpnConnectionAPIErrorHandler(h ErrorHandler) VpnConnectionAPIOption {
	return func(c *VpnConnectionAPIController) {
		c.errorHandler = h
	}
}

// NewVpnConnectionAPIController creates a default api controller
func NewVpnConnectionAPIController(s VpnConnectionAPIServicer, opts ...VpnConnectionAPIOption) Router {
	controller := &VpnConnectionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VpnConnectionAPIController
func (c *VpnConnectionAPIController) Routes() Routes {
	return Routes{
		"ListConnections": Route{
			strings.ToUpper("Get"),
			"/api/v1/connections",
			c.ListConnections,
		},
		"ReadConnectionStatus": Route{
			strings.ToUpper("Get"),
			"/api/v1/connections/connection/{client}/{id}/",
			c.ReadConnectionStatus,
		},
		"SetConnectionStatus": Route{
			strings.ToUpper("Post"),
			"/api/v1/connections/connection/{client}/{id}/",
			c.SetConnectionStatus,
		},
	}
}

// ListConnections - Get list of Connections
func (c *VpnConnectionAPIController) ListConnections(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListConnections(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadConnectionStatus - Read connection status
func (c *VpnConnectionAPIController) ReadConnectionStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	clientParam := params["client"]
	if clientParam == "" {
		c.errorHandler(w, r, &RequiredError{"client"}, nil)
		return
	}
	result, err := c.service.ReadConnectionStatus(r.Context(), idParam, clientParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetConnectionStatus - Set connection status
func (c *VpnConnectionAPIController) SetConnectionStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	clientParam := params["client"]
	if clientParam == "" {
		c.errorHandler(w, r, &RequiredError{"client"}, nil)
		return
	}
	desiredConnectionStatusParam := DesiredConnectionStatus{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&desiredConnectionStatusParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDesiredConnectionStatusRequired(desiredConnectionStatusParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDesiredConnectionStatusConstraints(desiredConnectionStatusParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetConnectionStatus(r.Context(), idParam, clientParam, desiredConnectionStatusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
