/*
 * VPN Gateway API
 *
 * A REST compliant API to manage a VPN Gateway instance.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package vpnapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VpnConnectionApiController binds http requests to an api service and writes the service results to the http response
type VpnConnectionApiController struct {
	service      VpnConnectionApiServicer
	errorHandler ErrorHandler
}

// VpnConnectionApiOption for how the controller is set up.
type VpnConnectionApiOption func(*VpnConnectionApiController)

// WithVpnConnectionApiErrorHandler inject ErrorHandler into controller
func WithVpnConnectionApiErrorHandler(h ErrorHandler) VpnConnectionApiOption {
	return func(c *VpnConnectionApiController) {
		c.errorHandler = h
	}
}

// NewVpnConnectionApiController creates a default api controller
func NewVpnConnectionApiController(s VpnConnectionApiServicer, opts ...VpnConnectionApiOption) Router {
	controller := &VpnConnectionApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VpnConnectionApiController
func (c *VpnConnectionApiController) Routes() Routes {
	return Routes{
		{
			"ListConnections",
			strings.ToUpper("Get"),
			"/api/v1/connections",
			c.ListConnections,
		},
		{
			"ReadConnectionStatus",
			strings.ToUpper("Get"),
			"/api/v1/connections/connection/{id}/",
			c.ReadConnectionStatus,
		},
		{
			"SetConnectionStatus",
			strings.ToUpper("Post"),
			"/api/v1/connections/connection/{id}/",
			c.SetConnectionStatus,
		},
	}
}

// ListConnections - Get list of Connections
func (c *VpnConnectionApiController) ListConnections(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListConnections(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ReadConnectionStatus - Read connection status
func (c *VpnConnectionApiController) ReadConnectionStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	result, err := c.service.ReadConnectionStatus(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SetConnectionStatus - Set connection status
func (c *VpnConnectionApiController) SetConnectionStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	desiredConnectionStatusParam := DesiredConnectionStatus{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&desiredConnectionStatusParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDesiredConnectionStatusRequired(desiredConnectionStatusParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetConnectionStatus(r.Context(), idParam, desiredConnectionStatusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
