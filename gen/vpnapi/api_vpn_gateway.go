// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * VPN Gateway API
 *
 * A REST compliant API to manage a VPN Gateway instance.
 *
 * API version: 1.0
 */

package vpnapi

import (
	"net/http"
	"strings"
)

// VpnGatewayAPIController binds http requests to an api service and writes the service results to the http response
type VpnGatewayAPIController struct {
	service      VpnGatewayAPIServicer
	errorHandler ErrorHandler
}

// VpnGatewayAPIOption for how the controller is set up.
type VpnGatewayAPIOption func(*VpnGatewayAPIController)

// WithVpnGatewayAPIErrorHandler inject ErrorHandler into controller
func WithVpnGatewayAPIErrorHandler(h ErrorHandler) VpnGatewayAPIOption {
	return func(c *VpnGatewayAPIController) {
		c.errorHandler = h
	}
}

// NewVpnGatewayAPIController creates a default api controller
func NewVpnGatewayAPIController(s VpnGatewayAPIServicer, opts ...VpnGatewayAPIOption) Router {
	controller := &VpnGatewayAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VpnGatewayAPIController
func (c *VpnGatewayAPIController) Routes() Routes {
	return Routes{
		"OverallStatus": Route{
			strings.ToUpper("Get"),
			"/api/v1/",
			c.OverallStatus,
		},
	}
}

// OverallStatus - Get overall status
func (c *VpnGatewayAPIController) OverallStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.OverallStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
