/*
 * VPN Gateway API
 *
 * A REST compliant API to manage a VPN Gateway instance.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package vpnapi

import (
	"net/http"
	"strings"
)

// VpnGatewayApiController binds http requests to an api service and writes the service results to the http response
type VpnGatewayApiController struct {
	service      VpnGatewayApiServicer
	errorHandler ErrorHandler
}

// VpnGatewayApiOption for how the controller is set up.
type VpnGatewayApiOption func(*VpnGatewayApiController)

// WithVpnGatewayApiErrorHandler inject ErrorHandler into controller
func WithVpnGatewayApiErrorHandler(h ErrorHandler) VpnGatewayApiOption {
	return func(c *VpnGatewayApiController) {
		c.errorHandler = h
	}
}

// NewVpnGatewayApiController creates a default api controller
func NewVpnGatewayApiController(s VpnGatewayApiServicer, opts ...VpnGatewayApiOption) Router {
	controller := &VpnGatewayApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VpnGatewayApiController
func (c *VpnGatewayApiController) Routes() Routes {
	return Routes{
		{
			"OverallStatus",
			strings.ToUpper("Get"),
			"/api/v1/",
			c.OverallStatus,
		},
	}
}

// OverallStatus - Get overall status
func (c *VpnGatewayApiController) OverallStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.OverallStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
